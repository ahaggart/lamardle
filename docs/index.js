(()=>{"use strict";var t,e={508:(t,e,s)=>{s.r(e),s.d(e,{LamardleGame:()=>g});var i=s(601);class r extends HTMLElement{constructor(t){super(),this.grid=t,this.letters="",this.enabled=!0,this.container=document.createElement("div"),this.container.style.margin="0 5px",this.container.appendChild(this.createRow("qwertyuiop")),this.container.appendChild(this.createRow(" asdfghjkl ")),this.container.appendChild(this.createRow("+zxcvbnm-")),this.appendChild(this.container)}backspace(){this.enabled&&0!=this.letters.length&&(this.letters=this.letters.substring(0,this.letters.length-1),this.grid.setLetters(this.letters))}appendLetter(t){this.enabled&&5!=this.letters.length&&(this.letters+=t,this.grid.setLetters(this.letters))}submit(){this.enabled&&this.grid.submit()&&(this.letters="")}createRow(t){const e=document.createElement("div");e.classList.add("game-keyboard-row");for(let s of t)if(" "===s){const t=document.createElement("div");t.classList.add("point-five"),e.appendChild(t)}else if("+"===s){const t=document.createElement("button");t.classList.add("key","one-point-five","enter"),t.innerText="enter",t.addEventListener("click",(()=>this.submit())),e.appendChild(t)}else if("-"===s){const t=document.createElement("button");t.classList.add("key","one-point-five","delete"),t.innerText="del",t.addEventListener("click",(()=>this.backspace())),e.appendChild(t)}else{const t=document.createElement("button");t.classList.add("key"),t.addEventListener("click",(()=>this.appendLetter(s))),t.innerText=s,e.appendChild(t)}return e}disable(){this.enabled=!1}enable(){this.enabled=!0}show(){this.container.classList.remove("hidden")}hide(){this.container.classList.add("hidden")}}customElements.define("game-keyboard",r);class a extends HTMLElement{constructor(t,e){super(),this.pos=e,this.setLetter(t||""),this.classList.add("letter","no-match")}setLetter(t){this.letter=t,this.innerText=t}setMatch(t,e){this.classList.remove("both-match","upper-match","lower-match","no-match"),t&&e?this.classList.add("both-match"):e?this.classList.add("lower-match"):t?this.classList.add("upper-match"):this.classList.add("no-match")}setHighlight(t){this.style.borderColor=t?"var(--highlight-color)":"var(--non-highlight-color)"}}customElements.define("grid-letter",a);class n extends HTMLElement{constructor(t){super(),this.tiles=[],this.letters="",this.config=t,this.classList.add("grid-row");for(let t=0;t<this.config.letters;t++){const e=new a("",t);this.tiles.push(e),this.appendChild(e)}this.setLetters(this.getAttribute("letters"))}getLetters(){return this.letters}setLetters(t){this.letters=t||"";const e=this.letters.substring(0,this.config.letters).padEnd(this.config.letters," ");for(let t=0;t<this.config.letters;t++)this.tiles[t].setLetter(e[t])}updateMatches(t,e){for(let s=0;s<this.tiles.length;s++)this.tiles[s].setMatch(this.tiles[s].letter===t.tiles[s].letter,this.tiles[s].letter===e.tiles[s].letter)}setHighlight(t){this.tiles.forEach((e=>e.setHighlight(t)))}isComplete(){return this.letters.length===this.config.letters}doesMatch(t){if(!this.isComplete()||!t.isComplete())return!1;var e=0;for(let s=0;s<this.config.letters;s++)this.letters[s]===t.letters[s]&&e++;return!(e<this.config.matches)}wiggle(){this.setAttribute("wiggle",""),window.setTimeout((()=>this.removeAttribute("wiggle")),i.xw)}}customElements.define("grid-row",n);var h=s(231);class o extends HTMLElement{constructor(t,e){super(),this.config=t,this.callbacks=e,this.rowConfig={letters:this.config.letters,matches:this.config.matches},this.numGuesses=0,this.upperMatches=[],this.lowerMatches=[],this.id="game-grid",this.grid=document.createElement("div"),this.grid.classList.add("grid"),this.grid.id="grid",this.grid.style.setProperty("--num-rows",this.config.rows.toString()),this.appendChild(this.grid),h.W.addListener((t=>{this.words=t,this.createRows(),e.onLoad&&e.onLoad(this)}))}getRandomWord(t){return this.words[Math.abs(this.getHashCode(t))%this.words.length]}createRows(){this.upper=new n(this.rowConfig),this.upperStart=this.getRandomWord(this.config.seed),this.upper.setLetters(this.upperStart),this.lower=new n(this.rowConfig),this.lowerStart=this.getRandomWord(this.config.seed+"salt"),this.lower.setLetters(this.lowerStart),this.lower.id="goal",this.current=new n(this.rowConfig),this.current.setHighlight(!0);const t=Math.ceil((this.config.rows-3)/2),e=Math.floor((this.config.rows-3)/2);Array(t).fill(0).forEach((()=>this.grid.appendChild(new n(this.rowConfig)))),this.grid.appendChild(this.upper),this.grid.appendChild(this.current),this.grid.appendChild(this.lower),Array(e).fill(0).forEach((()=>this.grid.appendChild(new n(this.rowConfig))))}setLetters(t){this.current.setLetters(t),this.current.updateMatches(this.upper,this.lower)}getTileSize(t){const e=i.V2*(this.config.letters-1),s=Math.floor((t.width-e)/this.config.letters),r=2*i.ff,a=i.V2*(this.config.rows-1),n=Math.floor((t.height-a-r)/this.config.rows);return Math.min(s,n)}resize(t){const e=i.V2*(this.config.letters-1),s=i.V2*(this.config.rows-1),r=this.getTileSize(t),a=r*this.config.letters+e,n=r*this.config.rows+s;return this.grid.style.width=a+"px",this.grid.style.height=n+"px",t.height-n-10}submit(){if(!this.current.isComplete())return this.current.wiggle(),!1;if(!this.words.includes(this.current.getLetters()))return this.current.wiggle(),!1;const t=this.current.doesMatch(this.upper),e=this.current.doesMatch(this.lower);if(!t&&!e)return this.current.wiggle(),!1;if(this.numGuesses++,t&&e)return this.upperMatches.push(this.upper.getLetters()),this.lowerMatches.push(this.lower.getLetters()),this.callbacks.onWin({upper:this.upperMatches,solution:this.current.getLetters(),lower:this.lowerMatches}),!0;const s=new n(this.rowConfig);return s.setHighlight(!0),this.current.setHighlight(!1),t?(this.upperMatches.push(this.upper.getLetters()),this.grid.children[0].remove(),this.upper=this.current,this.current=s,this.grid.insertBefore(this.current,this.lower)):(this.lowerMatches.push(this.lower.getLetters()),this.grid.children[this.grid.children.length-1].remove(),this.lower=this.current,this.current=s,this.grid.insertBefore(this.current,this.lower)),!0}getHashCode(t){for(var e=0,s=0;s<t.length;s++)e=(e<<5)-e+t.charCodeAt(s),e&=e;return e}getUpper(){return this.upper}getLower(){return this.lower}getContainer(){return this.grid}getNumGuesses(){return this.numGuesses}getUpperStart(){return this.upperStart}getLowerStart(){return this.lowerStart}}function d(t){const e=document.createElement("p");return e.innerText=t.join(" "),e}customElements.define("game-grid",o);class l extends HTMLElement{constructor(t,e,s){super(),this.overlay=document.createElement("div"),this.overlay.classList.add("overlay","tutorial","hidden"),this.appendChild(this.overlay),this.textContainer=document.createElement("div"),this.textContainer.style.width=s.width+"px",this.textContainer.style.margin="auto",this.overlay.appendChild(this.textContainer);const i=document.createElement("div");i.classList.add("tutorial-title"),i.innerText="How to Play",this.textContainer.appendChild(i),this.textContainer.appendChild(d(['The goal of LAMARDLE is to find words which "match" the words','above or below them. Two words "match" when they share 3 or more',"letters in the same position."]));const r=new o(Object.assign(Object.assign({},e),{rows:3}),{onLoad:()=>{r.getUpper().setLetters("hello"),r.getLower().setLetters("world")}});r.resize({width:s.width,height:200}),this.textContainer.appendChild(r),this.textContainer.appendChild(d(["When you enter a word that matches the word above or below, it","will replace that word. If the word matches both words, you win!"]));const a=new o(Object.assign(Object.assign({},e),{rows:3}),{onLoad:()=>{a.getUpper().setLetters("hello"),a.getLower().setLetters("world"),a.setLetters("would")}});a.resize({width:s.width,height:200}),this.textContainer.appendChild(a),this.textContainer.appendChild(d(['In the example above, the middle word "would" matches "w", "o",','"l", and "d" from "world". It also matches "l" from "hello". When','entered, the lower word "world" is replaced with "would", so the','next word should match either "hello" or "would".']));const n=new o(Object.assign(Object.assign({},e),{rows:3}),{onLoad:()=>{n.getUpper().setLetters("hello"),n.getLower().setLetters("world"),n.setLetters("would"),n.submit()}});n.resize({width:s.width,height:200}),this.textContainer.appendChild(n),this.textContainer.appendChild(d(["Tap anywhere to continue. Happy Mother's Day!"])),t.hasVisited()||this.show(),this.overlay.onclick=()=>{this.hide(),t.setVisited()}}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}}customElements.define("game-tutorial",l);class c{constructor(){}solve(t,e){const s=new Map;s.set(t,null);for(var i=[t],r=[];i.length>0;){const t=i.pop();var a=!1;if(this.graph[t].forEach((i=>{s.has(i)||(s.set(i,t),r.push(i),i===e&&(a=!0))})),a)break;0===i.length&&0!==r.length&&(i=r,r=[])}const n=[e];var h=e;if(s.has(e)){for(;h!==t;)h=s.get(h),n.push(h);return n}return[]}loadGraph(){const t=new XMLHttpRequest;return new Promise((e=>{t.onreadystatechange=s=>{t.readyState===XMLHttpRequest.DONE&&200===t.status&&(this.graph=JSON.parse(t.responseText),e(this))},t.open("GET","graph.json"),t.send()}))}}class p{constructor(t){var e,s,i;this.schema={visited:t=>"true"===t,streak:t=>parseInt(t),mostRecent:t=>t},this.date=t;const r=this.parseCookie();this.data={visited:null!==(e=r.visited)&&void 0!==e&&e,streak:null!==(s=r.streak)&&void 0!==s?s:0,mostRecent:null!==(i=r.mostRecent)&&void 0!==i?i:""},this.checkStreak()}setVisited(){this.data.visited=!0,this.saveData()}hasVisited(){return this.data.visited}checkStreak(){if(this.data.mostRecent===this.formatDate(this.date))return;const t=new Date(this.date);t.setDate(this.date.getDate()-1),this.data.mostRecent!==this.formatDate(t)&&(this.data.streak=0)}addStreak(){this.data.mostRecent!==this.formatDate(this.date)&&(this.data.streak++,this.data.mostRecent=this.formatDate(this.date),this.saveData())}saveData(){const t=new Date;t.setDate((new Date).getDate()+i.c1);const e="expires="+t.toUTCString();Object.entries(this.data).forEach((([t,s])=>{document.cookie=t+"="+s.toString()+";"+e}))}parseCookie(){const t={};return document.cookie&&decodeURI(document.cookie).split(";").map((t=>t.split("="))).forEach((e=>{const s=e[0].trim(),i=e[1];this.schema.hasOwnProperty(s)&&(t[s]=this.schema[s](i))})),t}formatDate(t){return[t.getFullYear().toString(),(t.getMonth()+1).toString().padStart(2,"0"),t.getDate().toString().padStart(2,"0")].join("")}getDate(){return this.date}getStreak(){return this.data.streak}}class g extends HTMLElement{constructor(){var t;super(),this.gameData=new p(new Date),this.container=document.createElement("div"),this.container.classList.add("container"),this.appendChild(this.container),this.winPopup=document.createElement("div"),this.winPopup.classList.add("overlay","hidden"),this.container.appendChild(this.winPopup),this.winPopup.onclick=()=>{this.winPopup.classList.add("hidden"),this.keyboard.disable()},this.winMessage=document.createElement("div"),this.winMessage.classList.add("winMessage"),this.winPopup.appendChild(this.winMessage),this.winMessageText=document.createElement("div"),this.winMessage.appendChild(this.winMessageText),this.winMessageShare=document.createElement("div"),this.winMessageShare.classList.add("share-result"),this.winMessageShare.innerText="Share!",this.winMessage.appendChild(this.winMessageShare),this.header=document.createElement("div"),this.header.classList.add("header"),this.container.appendChild(this.header),this.spacerLeft=document.createElement("div"),this.spacerLeft.classList.add("spacer-left"),this.header.appendChild(this.spacerLeft),this.spacerLeft.appendChild(this.createHeaderLink("home.svg",this.getDailyPuzzleLink(),{altText:"go to daily puzzle"})),this.spacerLeft.appendChild(this.createHeaderLink("dice-3.svg",this.getRandomPuzzleLink(),{altText:"go to random puzzle"})),this.titleText=document.createElement("div"),this.titleText.innerText="LAMARDLE",this.titleText.classList.add("title-text"),this.header.appendChild(this.titleText),this.spacerRight=document.createElement("div"),this.spacerRight.classList.add("spacer-right"),this.header.appendChild(this.spacerRight),this.spacerRight.appendChild(this.createHeaderLink("source.svg","https://github.com/ahaggart/lamardle",{newTab:!0,altText:"go to source code"}));const e=this.createHeaderIcon("help.svg",{altText:"show tutorial"});this.spacerRight.appendChild(e),this.urlSeed=new URL(document.location.href).searchParams.get("seed");const s=this.gameData.formatDate(this.gameData.getDate());this.seed=null!==(t=this.urlSeed)&&void 0!==t?t:s;const i={seed:this.seed,rows:7,letters:5,matches:3};this.tutorial=new l(this.gameData,i,this.getGridArea()),this.container.appendChild(this.tutorial),e.onclick=()=>this.tutorial.show(),this.grid=new o(i,{onWin:t=>this.winGame(t)}),this.container.append(this.grid),this.keyboard=new r(this.grid),this.container.append(this.keyboard),this.solver=new c,this.resizeGrid(),window.addEventListener("resize",(()=>this.resizeGrid())),document.addEventListener("keydown",(t=>{"Backspace"===t.key?this.keyboard.backspace():"Enter"===t.key?this.keyboard.submit():t.key.match(/^[a-z]$/)&&this.keyboard.appendLetter(t.key)}))}createHeaderLink(t,e,s={}){const i=document.createElement("a");return i.setAttribute("href",e),s.newTab&&i.setAttribute("target","_blank"),i.appendChild(this.createHeaderIcon(t,s)),i}createHeaderIcon(t,e={}){var s;const r=document.createElement("img");return r.setAttribute("src",t),r.setAttribute("width",i.L1.toString()),r.setAttribute("height",i.L1.toString()),e.altText&&r.setAttribute("alt",e.altText),(e.title||e.altText)&&r.setAttribute("title",null!==(s=e.title)&&void 0!==s?s:e.altText),r}getGridArea(){return{width:Math.min(i.d,window.innerWidth-i.XC),height:window.innerHeight-i.aK-i.Mz}}resizeGrid(){const t=this.grid.resize(this.getGridArea());this.grid.getContainer().style.marginBottom=t+"px"}computeMatching(t,e){const s=[];var i=t;for(let t=0;t<e.length;t++){const r=e[e.length-t-1],a=i.split("").map(((t,e)=>[t,r.charAt(e)])).map((([t,e])=>t===e));s.push(a),i=r}return s.reverse(),s}formatMatching(t,e,s){return t.map((t=>t.map((t=>t?e:s)).join("")))}createShareMessage(t,e){const s=this.formatMatching(this.computeMatching(t.solution,t.upper),i.JH,i.lw),r=this.formatMatching(this.computeMatching(t.solution,t.lower),i.LH,i.lw);return r.reverse(),Array.prototype.concat(["lamardle",e,this.grid.getNumGuesses().toString()+" tries"],s,[t.solution.split("").map((()=>i.V3)).join("")],r).join("\n")}computePar(){const t=this.solver.solve(this.grid.getUpperStart(),this.grid.getLowerStart());return Math.max(1,t.length-2)}winGame(t){return e=this,s=void 0,r=function*(){const e=[];e.push("You won in "+this.grid.getNumGuesses()+" tries!"),yield this.solver.loadGraph(),e.push("Par: "+this.computePar()),this.seed===this.gameData.formatDate(this.gameData.getDate())&&(this.gameData.addStreak(),e.push("Current Streak: "+this.gameData.getStreak())),this.winPopup.classList.remove("hidden"),this.winMessageText.innerText=e.join("\n"),this.winMessageShare.onclick=e=>{e.stopPropagation();const s=this.createShareMessage(t,document.location.origin+"?seed="+this.seed),i="Failed to Share :(",r=this.winMessageShare.innerText;navigator.share?navigator.share({title:document.title,text:s}).catch((()=>this.winMessageShare.innerText=i)):navigator.clipboard?(navigator.clipboard.writeText(s),this.winMessageShare.innerText="Copied to clipboard!",window.setTimeout((()=>this.winMessageShare.innerText=r),3e3)):this.winMessageShare.innerText=i}},new((i=void 0)||(i=Promise))((function(t,a){function n(t){try{o(r.next(t))}catch(t){a(t)}}function h(t){try{o(r.throw(t))}catch(t){a(t)}}function o(e){var s;e.done?t(e.value):(s=e.value,s instanceof i?s:new i((function(t){t(s)}))).then(n,h)}o((r=r.apply(e,s||[])).next())}));var e,s,i,r}getDailyPuzzleLink(){return"./"}getRandomPuzzleLink(){return"./?seed="+this.randomString()}randomString(){const t=[];for(let e=0;e<16;e++)t.push(Math.floor(10*Math.random()));return t.join("")}}customElements.define("lamardle-game",g)},601:(t,e,s)=>{s.d(e,{JH:()=>u,L1:()=>c,LH:()=>g,Mz:()=>h,V2:()=>i,V3:()=>w,XC:()=>l,XV:()=>a,aK:()=>d,c1:()=>p,d:()=>r,ff:()=>n,lw:()=>m,xw:()=>o});const i=5,r=500,a=5,n=10,h=50,o=400,d=184,l=2*n,c=25,p=3,g="🔼",u="🔽",m="⏺",w="*️⃣"},231:(t,e,s)=>{s.d(e,{W:()=>r,y:()=>a});var i=s(601);const r=new class{constructor(t){this.numLetters=t,this.isReady=!1,this.onReady=[],this.words=[]}addListener(t){this.onReady.push(t),this.isReady&&t(words)}setWords(t){this.words=t.split("\n"),this.isReady=!0,this.onReady.forEach((t=>t(this.words)))}}(i.XV);function a(t){const e=new XMLHttpRequest;e.onreadystatechange=s=>{e.readyState===XMLHttpRequest.DONE&&200===e.status&&t(e.responseText)},e.open("GET","five-letters.txt"),e.send()}}},s={};function i(t){var r=s[t];if(void 0!==r)return r.exports;var a=s[t]={exports:{}};return e[t](a,a.exports,i),a.exports}i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},t=i(231),i(508),(0,t.y)((e=>t.W.setWords(e)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,