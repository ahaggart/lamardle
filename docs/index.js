(()=>{"use strict";var t,e={162:(t,e,s)=>{s.r(e);var i=s(279);class r extends HTMLElement{constructor(t){super(),this.grid=t,this.letters="",this.enabled=!0,this.container=document.createElement("div"),this.container.style.margin="0 5px",this.container.appendChild(this.createRow("qwertyuiop")),this.container.appendChild(this.createRow(" asdfghjkl ")),this.container.appendChild(this.createRow("+zxcvbnm-")),this.appendChild(this.container)}backspace(){this.enabled&&0!=this.letters.length&&(this.letters=this.letters.substring(0,this.letters.length-1),this.grid.setLetters(this.letters))}appendLetter(t){this.enabled&&5!=this.letters.length&&(this.letters+=t,this.grid.setLetters(this.letters))}submit(){this.enabled&&this.grid.submit()&&(this.letters="")}createRow(t){const e=document.createElement("div");e.classList.add("game-keyboard-row");for(let s of t)if(" "===s){const t=document.createElement("div");t.classList.add("point-five"),e.appendChild(t)}else if("+"===s){const t=document.createElement("button");t.classList.add("key","one-point-five","enter"),t.innerText="enter",t.addEventListener("click",(()=>this.submit())),e.appendChild(t)}else if("-"===s){const t=document.createElement("button");t.classList.add("key","one-point-five","delete"),t.innerText="del",t.addEventListener("click",(()=>this.backspace())),e.appendChild(t)}else{const t=document.createElement("button");t.classList.add("key"),t.addEventListener("click",(()=>this.appendLetter(s))),t.innerText=s,e.appendChild(t)}return e}disable(){this.enabled=!1}enable(){this.enabled=!0}show(){this.container.classList.remove("hidden")}hide(){this.container.classList.add("hidden")}}customElements.define("game-keyboard",r);class a extends HTMLElement{constructor(t,e){super(),this.pos=e,this.setLetter(t||""),this.classList.add("letter","no-match")}setLetter(t){this.letter=t,this.innerText=t}setMatch(t,e){this.classList.remove("both-match","upper-match","lower-match","no-match"),t&&e?this.classList.add("both-match"):e?this.classList.add("lower-match"):t?this.classList.add("upper-match"):this.classList.add("no-match")}setHighlight(t){this.style.borderColor=t?"var(--highlight-color)":"var(--non-highlight-color)"}}customElements.define("grid-letter",a);class h extends HTMLElement{tiles=[];letters="";constructor(t){super(),this.config=t,this.classList.add("grid-row");for(let t=0;t<this.config.letters;t++){const e=new a("",t);this.tiles.push(e),this.appendChild(e)}this.setLetters(this.getAttribute("letters"))}setLetters(t){this.letters=t||"";const e=this.letters.substring(0,this.config.letters).padEnd(this.config.letters," ");for(let t=0;t<this.config.letters;t++)this.tiles[t].setLetter(e[t])}updateMatches(t,e){for(let s=0;s<this.tiles.length;s++)this.tiles[s].setMatch(this.tiles[s].letter===t.tiles[s].letter,this.tiles[s].letter===e.tiles[s].letter)}setHighlight(t){this.tiles.forEach((e=>e.setHighlight(t)))}isComplete(){return this.letters.length===this.config.letters}doesMatch(t){if(!this.isComplete()||!t.isComplete())return!1;var e=0;for(let s=0;s<this.config.letters;s++)this.letters[s]===t.letters[s]&&e++;return!(e<this.config.matches)}wiggle(){this.setAttribute("wiggle",""),window.setTimeout((()=>this.removeAttribute("wiggle")),i.xw)}}customElements.define("grid-row",h);var n=s(430);class o extends HTMLElement{constructor(t,e){super(),this.config=t,this.winCallback=e.onWin,this.rowConfig={letters:this.config.letters,matches:this.config.matches},this.numGuesses=0,this.upperMatches=[],this.lowerMatches=[],this.id="game-grid",this.grid=document.createElement("div"),this.grid.classList.add("grid"),this.grid.id="grid",this.grid.style.setProperty("--num-rows",this.config.rows),this.appendChild(this.grid),n.W.addListener((t=>{this.words=t,this.createRows(),e.onLoad&&e.onLoad(this)}))}getRandomWord(t){return this.words[Math.abs(this.getHashCode(t))%this.words.length]}createRows(){this.upper=new h(this.rowConfig),this.upperStart=this.getRandomWord(this.config.seed),this.upper.setLetters(this.upperStart),this.lower=new h(this.rowConfig),this.lowerStart=this.getRandomWord(this.config.seed+"salt"),this.lower.setLetters(this.lowerStart),this.lower.id="goal",this.current=new h(this.rowConfig),this.current.setHighlight(!0);const t=Math.ceil((this.config.rows-3)/2),e=Math.floor((this.config.rows-3)/2);Array(t).fill().forEach((()=>this.grid.appendChild(new h(this.rowConfig)))),this.grid.appendChild(this.upper),this.grid.appendChild(this.current),this.grid.appendChild(this.lower),Array(e).fill().forEach((()=>this.grid.appendChild(new h(this.rowConfig))))}setLetters(t){this.current.setLetters(t),this.current.updateMatches(this.upper,this.lower)}getTileSize(t){const e=i.V2*(this.config.letters-1),s=Math.floor((t.width-e)/this.config.letters),r=2*i.ff,a=i.V2*(this.config.rows-1),h=Math.floor((t.height-a-r)/this.config.rows);return Math.min(s,h)}resize(t){const e=i.V2*(this.config.letters-1),s=i.V2*(this.config.rows-1),r=this.getTileSize(t),a=r*this.config.letters+e,h=r*this.config.rows+s;return this.grid.style.width=a+"px",this.grid.style.height=h+"px",t.height-h-10}submit(){if(!this.current.isComplete())return this.current.wiggle(),!1;if(!this.words.includes(this.current.letters))return this.current.wiggle(),!1;const t=this.current.doesMatch(this.upper),e=this.current.doesMatch(this.lower);if(!t&&!e)return this.current.wiggle(),!1;if(this.numGuesses++,t&&e)return this.upperMatches.push(this.upper.letters),this.lowerMatches.push(this.lower.letters),this.winCallback({upper:this.upperMatches,solution:this.current.letters,lower:this.lowerMatches}),!0;const s=new h(this.rowConfig);return s.setHighlight(!0),this.current.setHighlight(!1),t?(this.upperMatches.push(this.upper.letters),this.grid.children[0].remove(),this.upper=this.current,this.current=s,this.grid.insertBefore(this.current,this.lower)):(this.lowerMatches.push(this.lower.letters),this.grid.children[this.grid.children.length-1].remove(),this.lower=this.current,this.current=s,this.grid.insertBefore(this.current,this.lower)),!0}getHashCode(t){for(var e=0,s=0;s<t.length;s++)e=(e<<5)-e+t.charCodeAt(s),e&=e;return e}}function d(t){const e=document.createElement("p");return e.innerText=t.join(" "),e}customElements.define("game-grid",o);class l extends HTMLElement{constructor(t,e,s){super(),this.overlay=document.createElement("div"),this.overlay.classList.add("overlay","tutorial","hidden"),this.appendChild(this.overlay),this.textContainer=document.createElement("div"),this.textContainer.style.width=s.width+"px",this.textContainer.style.margin="auto",this.overlay.appendChild(this.textContainer);const i=document.createElement("div");i.classList.add("tutorial-title"),i.innerText="How to Play",this.textContainer.appendChild(i),this.textContainer.appendChild(d(['The goal of LAMARDLE is to find words which "match" the words','above or below them. Two words "match" when they share 3 or more',"letters in the same position."]));const r=new o({...e,rows:3},{onLoad:()=>{r.upper.setLetters("hello"),r.lower.setLetters("world")}});r.resize({width:s.width,height:200}),this.textContainer.appendChild(r),this.textContainer.appendChild(d(["When you enter a word that matches the word above or below, it","will replace that word. If the word matches both words, you win!"]));const a=new o({...e,rows:3},{onLoad:()=>{a.upper.setLetters("hello"),a.lower.setLetters("world"),a.setLetters("would")}});a.resize({width:s.width,height:200}),this.textContainer.appendChild(a),this.textContainer.appendChild(d(['In the example above, the middle word "would" matches "w", "o",','"l", and "d" from "world". It also matches "l" from "hello". When','entered, the lower word "world" is replaced with "would", so the','next word should match either "hello" or "would".']));const h=new o({...e,rows:3},{onLoad:()=>{h.upper.setLetters("hello"),h.lower.setLetters("world"),h.setLetters("would"),h.submit()}});h.resize({width:s.width,height:200}),this.textContainer.appendChild(h),this.textContainer.appendChild(d(["Tap anywhere to continue. Happy Mother's Day!"])),t.hasVisited()||this.show(),this.overlay.onclick=()=>{this.hide(),t.setVisited()}}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}}customElements.define("game-tutorial",l);class c{constructor(){}solve(t,e){const s=new Map;s.set(t,null);for(var i=[t],r=[];i.length>0;){const t=i.pop();var a=!1;if(this.graph[t].forEach((i=>{s.has(i)||(s.set(i,t),r.push(i),i===e&&(a=!0))})),a)break;0===i.length&&0!==r.length&&(i=r,r=[])}const h=[e];var n=e;if(s.has(e)){for(;n!==t;)n=s.get(n),h.push(n);return h}return[]}loadGraph(){const t=new XMLHttpRequest;return new Promise(((e,s)=>{t.onreadystatechange=s=>{t.readyState===XMLHttpRequest.DONE&&200===t.status&&(this.graph=JSON.parse(t.responseText),e())},t.open("GET","graph.json"),t.send()}))}}class p{schema={visited:t=>"true"===t,streak:t=>parseInt(t),mostRecent:t=>t};constructor(t){this.date=t;const e=this.parseCookie();this.data={visited:e.visited??!1,streak:e.streak??0,mostRecent:e.mostRecent??""},this.checkStreak()}setVisited(){this.data.visited=!0,this.saveData()}hasVisited(){return this.data.visited}checkStreak(){if(this.data.mostRecent===this.formatDate(this.date))return;const t=new Date(this.date);t.setDate(this.date.getDate()-1),this.data.mostRecent!==this.formatDate(t)&&(this.data.streak=0)}addStreak(){this.data.mostRecent!==this.formatDate(this.date)&&(this.data.streak++,this.data.mostRecent=this.formatDate(this.date),this.saveData())}saveData(){const t=new Date;t.setDate((new Date).getDate()+i.c1);const e="expires="+t.toUTCString();for(let t in this.data)document.cookie=t+"="+this.data[t]+";"+e}parseCookie(){const t={};return document.cookie&&decodeURI(document.cookie).split(";").map((t=>t.split("="))).forEach((e=>{const s=e[0].trim(),i=e[1];this.schema.hasOwnProperty(s)&&(t[s]=this.schema[s](i))})),t}formatDate(t){return[t.getFullYear().toString(),(t.getMonth()+1).toString().padStart(2,"0"),t.getDate().toString().padStart(2,"0")].join("")}}class u extends HTMLElement{constructor(){super(),this.gameData=new p(new Date),this.container=document.createElement("div"),this.container.classList.add("container"),this.appendChild(this.container),this.winPopup=document.createElement("div"),this.winPopup.classList.add("overlay","hidden"),this.container.appendChild(this.winPopup),this.winPopup.onclick=()=>{this.winPopup.classList.add("hidden"),this.keyboard.disable()},this.winMessage=document.createElement("div"),this.winMessage.classList.add("winMessage"),this.winPopup.appendChild(this.winMessage),this.winMessageText=document.createElement("div"),this.winMessage.appendChild(this.winMessageText),this.winMessageShare=document.createElement("div"),this.winMessageShare.classList.add("share-result"),this.winMessageShare.innerText="Share!",this.winMessage.appendChild(this.winMessageShare),this.header=document.createElement("div"),this.header.classList.add("header"),this.container.appendChild(this.header),this.spacerLeft=document.createElement("div"),this.spacerLeft.classList.add("spacer-left"),this.header.appendChild(this.spacerLeft),this.spacerLeft.appendChild(this.createHeaderLink("home.svg",this.getDailyPuzzleLink(),{altText:"go to daily puzzle"})),this.spacerLeft.appendChild(this.createHeaderLink("dice-3.svg",this.getRandomPuzzleLink(),{altText:"go to random puzzle"})),this.titleText=document.createElement("div"),this.titleText.innerText="LAMARDLE",this.titleText.classList.add("title-text"),this.header.appendChild(this.titleText),this.spacerRight=document.createElement("div"),this.spacerRight.classList.add("spacer-right"),this.header.appendChild(this.spacerRight),this.spacerRight.appendChild(this.createHeaderLink("source.svg","https://github.com/ahaggart/lamardle",{newTab:!0,altText:"go to source code"}));const t=this.createHeaderIcon("help.svg",{altText:"show tutorial"});this.spacerRight.appendChild(t),this.urlSeed=new URL(document.location).searchParams.get("seed");const e=this.gameData.formatDate(this.gameData.date);this.seed=this.urlSeed??e;const s={seed:this.seed,rows:7,letters:5,matches:3};this.tutorial=new l(this.gameData,s,this.getGridArea()),this.container.appendChild(this.tutorial),t.onclick=()=>this.tutorial.show(),this.grid=new o(s,{onWin:t=>this.winGame(t)}),this.container.append(this.grid),this.keyboard=new r(this.grid),this.container.append(this.keyboard),this.solver=new c,this.resizeGrid(),window.addEventListener("resize",(()=>this.resizeGrid())),document.addEventListener("keydown",(t=>{"Backspace"===t.key?this.keyboard.backspace():"Enter"===t.key?this.keyboard.submit():t.key.match(/^[a-z]$/)&&this.keyboard.appendLetter(t.key)}))}createHeaderLink(t,e,s={}){const i=document.createElement("a");return i.setAttribute("href",e),s.newTab&&i.setAttribute("target","_blank"),i.appendChild(this.createHeaderIcon(t,s)),i}createHeaderIcon(t,e={}){const s=document.createElement("img");return s.setAttribute("src",t),s.setAttribute("width",i.L1),s.setAttribute("height",i.L1),e.altText&&s.setAttribute("alt",e.altText),(e.title||e.altText)&&s.setAttribute("title",e.title??e.altText),s}getGridArea(){return{width:Math.min(i.d,window.innerWidth-i.XC),height:window.innerHeight-i.aK-i.Mz}}resizeGrid(){const t=this.grid.resize(this.getGridArea());this.grid.grid.style.marginBottom=t+"px"}computeMatching(t,e){const s=[];var i=t;for(let t=0;t<e.length;t++){const r=e[e.length-t-1],a=i.split("").map(((t,e)=>[t,r.charAt(e)])).map((([t,e])=>t===e));s.push(a),i=r}return s.reverse(),s}formatMatching(t,e,s){return t.map((t=>t.map((t=>t?e:s)).join("")))}createShareMessage(t,e){const s=this.formatMatching(this.computeMatching(t.solution,t.upper),i.JH,i.lw),r=this.formatMatching(this.computeMatching(t.solution,t.lower),i.LH,i.lw);return r.reverse(),Array.prototype.concat(["lamardle",e,this.grid.numGuesses+" tries"],s,[t.solution.split("").map((()=>i.V3)).join("")],r).join("\n")}computePar(){const t=this.solver.solve(this.grid.upperStart,this.grid.lowerStart);return Math.max(1,t.length-2)}async winGame(t){const e=[];e.push("You won in "+this.grid.numGuesses+" tries!"),await this.solver.loadGraph(),e.push("Par: "+this.computePar()),this.seed===this.gameData.formatDate(this.gameData.date)&&(this.gameData.addStreak(),e.push("Current Streak: "+this.gameData.data.streak)),this.winPopup.classList.remove("hidden"),this.winMessageText.innerText=e.join("\n"),this.winMessageShare.onclick=e=>{e.stopPropagation();const s=this.createShareMessage(t,document.location.origin+"?seed="+this.seed),i="Failed to Share :(",r=this.winMessageShare.innerText;navigator.share?navigator.share({title:document.title,text:s}).catch((()=>this.winMessageShare.innerText=i)):navigator.clipboard?(navigator.clipboard.writeText(s),this.winMessageShare.innerText="Copied to clipboard!",window.setTimeout((()=>this.winMessageShare.innerText=r),3e3)):this.winMessageShare.innerText=i}}getDailyPuzzleLink(){return"./"}getRandomPuzzleLink(){return"./?seed="+this.randomString()}randomString(){const t=[];for(let e=0;e<16;e++)t.push(Math.floor(10*Math.random()));return t.join("")}}customElements.define("lamardle-game",u)},279:(t,e,s)=>{s.d(e,{JH:()=>g,L1:()=>c,LH:()=>u,Mz:()=>n,V2:()=>i,V3:()=>w,XC:()=>l,XV:()=>a,aK:()=>d,c1:()=>p,d:()=>r,ff:()=>h,lw:()=>m,xw:()=>o});const i=5,r=500,a=5,h=10,n=50,o=400,d=184,l=2*h,c=25,p=3,u="🔼",g="🔽",m="⏺",w="*️⃣"},430:(t,e,s)=>{s.d(e,{W:()=>r,y:()=>a});var i=s(279);const r=new class{constructor(t){this.numLetters=t,this.isReady=!1,this.onReady=[],this.words=[]}addListener(t){this.onReady.push(t),this.isReady&&t(words)}setWords(t){this.words=t.split("\n"),this.isReady=!0,this.onReady.forEach((t=>t(this.words)))}}(i.XV);function a(t){const e=new XMLHttpRequest;e.onreadystatechange=s=>{e.readyState===XMLHttpRequest.DONE&&200===e.status&&t(e.responseText)},e.open("GET","five-letters.txt"),e.send()}}},s={};function i(t){var r=s[t];if(void 0!==r)return r.exports;var a=s[t]={exports:{}};return e[t](a,a.exports,i),a.exports}i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},t=i(430),i(162),(0,t.y)((e=>t.W.setWords(e)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,