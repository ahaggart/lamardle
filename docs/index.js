(()=>{var t={827:(t,e,s)=>{"use strict";s.r(e),s.d(e,{LamardleGame:()=>m});class i extends HTMLElement{constructor(t){super(),this.grid=t,this.letters="",this.enabled=!0,this.container=document.createElement("div"),this.container.style.margin="0 5px",this.container.appendChild(this.createRow("qwertyuiop")),this.container.appendChild(this.createRow(" asdfghjkl ")),this.container.appendChild(this.createRow("+zxcvbnm-")),this.appendChild(this.container)}backspace(){this.enabled&&0!=this.letters.length&&(this.letters=this.letters.substring(0,this.letters.length-1),this.grid.setLetters(this.letters))}appendLetter(t){this.enabled&&5!=this.letters.length&&(this.letters+=t,this.grid.setLetters(this.letters))}submit(){this.enabled&&this.grid.submit()&&(this.letters="")}createRow(t){const e=document.createElement("div");e.classList.add("game-keyboard-row");for(let s of t)if(" "===s){const t=document.createElement("div");t.classList.add("point-five"),e.appendChild(t)}else if("+"===s){const t=document.createElement("button");t.classList.add("key","one-point-five","enter"),t.innerText="enter",t.addEventListener("click",(()=>this.submit())),e.appendChild(t)}else if("-"===s){const t=document.createElement("button");t.classList.add("key","one-point-five","delete"),t.innerText="del",t.addEventListener("click",(()=>this.backspace())),e.appendChild(t)}else{const t=document.createElement("button");t.classList.add("key"),t.addEventListener("click",(()=>this.appendLetter(s))),t.innerText=s,e.appendChild(t)}return e}disable(){this.enabled=!1}enable(){this.enabled=!0}show(){this.container.classList.remove("hidden")}hide(){this.container.classList.add("hidden")}}customElements.define("game-keyboard",i);class r extends HTMLElement{constructor(t,e){super(),this.pos=e,this.setLetter(t||""),this.classList.add("letter","no-match")}setLetter(t){this.letter=t,this.innerText=t}setMatch(t,e){this.classList.remove("both-match","upper-match","lower-match","no-match"),t&&e?this.classList.add("both-match"):e?this.classList.add("lower-match"):t?this.classList.add("upper-match"):this.classList.add("no-match")}setHighlight(t){this.style.borderColor=t?"var(--highlight-color)":"var(--non-highlight-color)"}}customElements.define("grid-letter",r);class a extends HTMLElement{constructor(t){super(),this.tiles=[],this.letters="",this.config=t,this.classList.add("grid-row");for(let t=0;t<this.config.letters;t++){const e=new r("",t);this.tiles.push(e),this.appendChild(e)}this.setLetters(this.getAttribute("letters"))}getLetters(){return this.letters}setLetters(t){this.letters=t||"";const e=this.letters.substring(0,this.config.letters).padEnd(this.config.letters," ");for(let t=0;t<this.config.letters;t++)this.tiles[t].setLetter(e[t])}updateMatches(t,e){for(let s=0;s<this.tiles.length;s++)this.tiles[s].setMatch(this.tiles[s].letter===t.tiles[s].letter,this.tiles[s].letter===e.tiles[s].letter)}setHighlight(t){this.tiles.forEach((e=>e.setHighlight(t)))}isComplete(){return this.letters.length===this.config.letters}doesMatch(t){if(!this.isComplete()||!t.isComplete())return!1;var e=0;for(let s=0;s<this.config.letters;s++)this.letters[s]===t.letters[s]&&e++;return!(e<this.config.matches)}wiggle(){this.setAttribute("wiggle",""),window.setTimeout((()=>this.removeAttribute("wiggle")),400)}}customElements.define("grid-row",a);class n extends HTMLElement{constructor(t,e={}){super(),this.config=t,this.callbacks=e,this.rowConfig={letters:this.config.letters,matches:this.config.matches},this.numGuesses=0,this.upperMatches=[],this.lowerMatches=[],this.id="game-grid",this.grid=document.createElement("div"),this.grid.classList.add("grid"),this.grid.id="grid",this.grid.style.setProperty("--num-rows",this.config.rows.toString()),this.appendChild(this.grid),this.createRows()}createRows(){this.upper=new a(this.rowConfig),this.lower=new a(this.rowConfig),this.lower.id="goal",this.current=new a(this.rowConfig),this.current.setHighlight(!0);const t=Math.ceil((this.config.rows-3)/2),e=Math.floor((this.config.rows-3)/2);Array(t).fill(0).forEach((()=>this.grid.appendChild(new a(this.rowConfig)))),this.grid.appendChild(this.upper),this.grid.appendChild(this.current),this.grid.appendChild(this.lower),Array(e).fill(0).forEach((()=>this.grid.appendChild(new a(this.rowConfig))))}initialize(t,e){this.words=t,this.upperStart=e.getUpper(),this.upper.setLetters(this.upperStart),this.lowerStart=e.getLower(),this.lower.setLetters(this.lowerStart)}setLetters(t){this.current.setLetters(t),this.current.updateMatches(this.upper,this.lower)}getTileSize(t){const e=5*(this.config.letters-1),s=Math.floor((t.width-e)/this.config.letters),i=5*(this.config.rows-1),r=Math.floor((t.height-i-20)/this.config.rows);return Math.min(s,r)}resize(t){const e=5*(this.config.letters-1),s=5*(this.config.rows-1),i=this.getTileSize(t),r=i*this.config.letters+e,a=i*this.config.rows+s;return this.grid.style.width=r+"px",this.grid.style.height=a+"px",t.height-a-10}submit({checkWords:t=!0}={}){if(!this.current.isComplete())return this.current.wiggle(),!1;if(t&&!this.words.includes(this.current.getLetters()))return this.current.wiggle(),!1;const e=this.current.doesMatch(this.upper),s=this.current.doesMatch(this.lower);if(!e&&!s)return this.current.wiggle(),!1;if(this.numGuesses++,e&&s)return this.upperMatches.push(this.upper.getLetters()),this.lowerMatches.push(this.lower.getLetters()),this.callbacks.onWin({upper:this.upperMatches,solution:this.current.getLetters(),lower:this.lowerMatches}),!0;const i=new a(this.rowConfig);return i.setHighlight(!0),this.current.setHighlight(!1),e?(this.upperMatches.push(this.upper.getLetters()),this.grid.children[0].remove(),this.upper=this.current,this.current=i,this.grid.insertBefore(this.current,this.lower)):(this.lowerMatches.push(this.lower.getLetters()),this.grid.children[this.grid.children.length-1].remove(),this.lower=this.current,this.current=i,this.grid.insertBefore(this.current,this.lower)),!0}getUpper(){return this.upper}getLower(){return this.lower}getContainer(){return this.grid}getNumGuesses(){return this.numGuesses}getUpperStart(){return this.upperStart}getLowerStart(){return this.lowerStart}}function h(t){const e=document.createElement("p");return e.innerText=t.join(" "),e}customElements.define("game-grid",n);class o extends HTMLElement{constructor(t,e,s){super(),this.overlay=document.createElement("div"),this.overlay.classList.add("overlay","tutorial","hidden"),this.appendChild(this.overlay),this.textContainer=document.createElement("div"),this.textContainer.style.width=s.width+"px",this.textContainer.style.margin="auto",this.overlay.appendChild(this.textContainer);const i=document.createElement("div");i.classList.add("tutorial-title"),i.innerText="How to Play",this.textContainer.appendChild(i),this.textContainer.appendChild(h(['The goal of LAMARDLE is to find words which "match" the words','above or below them. Two words "match" when they share 3 or more',"letters in the same position."]));const r=new n(Object.assign(Object.assign({},e),{rows:3}));r.resize({width:s.width,height:200}),r.getUpper().setLetters("hello"),r.getLower().setLetters("world"),this.textContainer.appendChild(r),this.textContainer.appendChild(h(["When you enter a word that matches the word above or below, it","will replace that word. If the word matches both words, you win!"]));const a=new n(Object.assign(Object.assign({},e),{rows:3}));a.resize({width:s.width,height:200}),a.getUpper().setLetters("hello"),a.getLower().setLetters("world"),a.setLetters("would"),this.textContainer.appendChild(a),this.textContainer.appendChild(h(['In the example above, the middle word "would" matches "w", "o",','"l", and "d" from "world". It also matches "l" from "hello". When','entered, the lower word "world" is replaced with "would", so the','next word should match either "hello" or "would".']));const o=new n(Object.assign(Object.assign({},e),{rows:3}));o.resize({width:s.width,height:200}),o.getUpper().setLetters("hello"),o.getLower().setLetters("world"),o.setLetters("would"),o.submit({checkWords:!1}),this.textContainer.appendChild(o),this.textContainer.appendChild(h(["Tap anywhere to continue. Happy Mother's Day!"])),t.hasVisited()||this.show(),this.overlay.onclick=()=>{this.hide(),t.setVisited()}}show(){this.overlay.classList.remove("hidden")}hide(){this.overlay.classList.add("hidden")}}customElements.define("game-tutorial",o);class d{constructor(){}getLayer(t,e){const s=[];return this.traverse(t,(function(t,i,r){return r>e||r==e&&(s.push(t),!1)})),s}solve(t,e){const s=new Map;this.traverse(t,(function(t,i,r){return s.set(t,i),t===e}));const i=[e];var r=e;if(s.has(e)){for(;r!==t;)r=s.get(r),i.push(r);return i}return[]}traverse(t,e){const s=new Set;var i=0,r=[],a=[];s.add(t),r.push(t);for(var n=e(t,null,i);r.length>0;){const t=r.pop();if(n=!1,this.graph[t].forEach((r=>{s.has(r)||(s.add(r),a.push(r),n=e(r,t,i+1)||n)})),n)break;0===r.length&&0!==a.length&&(i++,r=a,a=[])}}loadGraph(){return void 0===this.onLoad&&(this.onLoad=new Promise((t=>{const e=new XMLHttpRequest;e.onreadystatechange=s=>{e.readyState===XMLHttpRequest.DONE&&200===e.status&&(this.graph=JSON.parse(e.responseText),t(this))},e.open("GET","graph.json"),e.send()}))),this.onLoad}}class l{constructor(t){var e,s,i;this.schema={visited:t=>"true"===t,streak:t=>parseInt(t),mostRecent:t=>t},this.date=t;const r=this.parseCookie();this.data={visited:null!==(e=r.visited)&&void 0!==e&&e,streak:null!==(s=r.streak)&&void 0!==s?s:0,mostRecent:null!==(i=r.mostRecent)&&void 0!==i?i:""},this.checkStreak()}setVisited(){this.data.visited=!0,this.saveData()}hasVisited(){return this.data.visited}checkStreak(){if(this.data.mostRecent===this.formatDate(this.date))return;const t=new Date(this.date);t.setDate(this.date.getDate()-1),this.data.mostRecent!==this.formatDate(t)&&(this.data.streak=0)}addStreak(){this.data.mostRecent!==this.formatDate(this.date)&&(this.data.streak++,this.data.mostRecent=this.formatDate(this.date),this.saveData())}saveData(){const t=new Date;t.setDate((new Date).getDate()+3);const e="expires="+t.toUTCString();Object.entries(this.data).forEach((([t,s])=>{document.cookie=t+"="+s.toString()+";"+e}))}parseCookie(){const t={};return document.cookie&&decodeURI(document.cookie).split(";").map((t=>t.split("="))).forEach((e=>{const s=e[0].trim(),i=e[1];this.schema.hasOwnProperty(s)&&(t[s]=this.schema[s](i))})),t}formatDate(t){return[t.getFullYear().toString(),(t.getMonth()+1).toString().padStart(2,"0"),t.getDate().toString().padStart(2,"0")].join("")}getDate(){return this.date}getStreak(){return this.data.streak}}class c{constructor(){this.words=[]}setWords(t){this.words=t.split("\n")}loadWords(){return void 0===this.wordsPromise&&(this.wordsPromise=new Promise((t=>{const e=new XMLHttpRequest;e.onreadystatechange=s=>{e.readyState===XMLHttpRequest.DONE&&200===e.status&&(this.setWords(e.responseText),t(this.words))},e.open("GET","five-letters.txt"),e.send()}))),this.wordsPromise}}function p(t,e){return t[Math.abs(function(t){for(var e=0,s=0;s<t.length;s++)e=(e<<5)-e+t.charCodeAt(s),e&=e;return e}(e))%t.length]}class g{constructor(t,e){this.words=t,this.seed=e}getUpper(){return p(this.words,this.seed)}getLower(){return p(this.words,this.seed+"salt")}}class u{constructor(t,e,s,i){this.words=t,this.seed=e,this.minSteps=s,this.solver=i}onceInitialized(t){this.solver.loadGraph().then((()=>t(this)))}getUpper(){return p(this.words,this.seed)}getLower(){const t=this.getUpper();for(var e=this.minSteps+1,s=this.solver.getLayer(t,e);0==s.length;)e--,s=this.solver.getLayer(t,e);return console.log(e),p(s,this.seed)}}class m extends HTMLElement{constructor(){var t;super(),this.gameData=new l(new Date),this.wordList=new c,this.mode=new URL(document.location.href).searchParams.get("mode"),this.container=document.createElement("div"),this.container.classList.add("container"),this.appendChild(this.container),this.winPopup=document.createElement("div"),this.winPopup.classList.add("overlay","hidden"),this.container.appendChild(this.winPopup),this.winPopup.onclick=()=>{this.winPopup.classList.add("hidden"),this.keyboard.disable()},this.winMessage=document.createElement("div"),this.winMessage.classList.add("winMessage"),this.winPopup.appendChild(this.winMessage),this.winMessageText=document.createElement("div"),this.winMessage.appendChild(this.winMessageText),this.winMessageShare=document.createElement("div"),this.winMessageShare.classList.add("win-msg-button","share-result"),this.winMessageShare.innerText="Share!",this.winMessage.appendChild(this.winMessageShare),this.winMessageHardmode=document.createElement("a"),this.winMessageHardmode.classList.add("win-msg-button","try-hard-mode"),this.winMessageHardmode.innerText="Try Hard Mode!";const e=new URL(document.location.href);e.searchParams.set("mode","hard"),this.winMessageHardmode.setAttribute("target","_blank"),this.winMessageHardmode.href=e.toString(),this.winMessageHardmode.onclick=t=>{t.stopPropagation()},"hard"===this.mode&&this.winMessageHardmode.classList.add("hidden"),this.winMessage.appendChild(this.winMessageHardmode),this.header=document.createElement("div"),this.header.classList.add("header"),this.container.appendChild(this.header),this.spacerLeft=document.createElement("div"),this.spacerLeft.classList.add("spacer-left"),this.header.appendChild(this.spacerLeft),this.spacerLeft.appendChild(this.createHeaderLink("home.svg",this.getDailyPuzzleLink(),{altText:"go to daily puzzle"})),this.spacerLeft.appendChild(this.createHeaderLink("dice-3.svg",this.getRandomPuzzleLink(),{altText:"go to random puzzle"})),this.titleText=document.createElement("div"),this.titleText.innerText="LAMARDLE",this.titleText.classList.add("title-text"),this.header.appendChild(this.titleText),this.spacerRight=document.createElement("div"),this.spacerRight.classList.add("spacer-right"),this.header.appendChild(this.spacerRight),this.spacerRight.appendChild(this.createHeaderLink("source.svg","https://github.com/ahaggart/lamardle",{newTab:!0,altText:"go to source code"}));const s=this.createHeaderIcon("help.svg",{altText:"show tutorial"});this.spacerRight.appendChild(s),this.urlSeed=new URL(document.location.href).searchParams.get("seed");const r=this.gameData.formatDate(this.gameData.getDate());this.seed=null!==(t=this.urlSeed)&&void 0!==t?t:r;const a={seed:this.seed,rows:7,letters:5,matches:3};this.tutorial=new o(this.gameData,a,this.getGridArea()),this.container.appendChild(this.tutorial),s.onclick=()=>this.tutorial.show(),this.grid=new n(a,{onWin:t=>this.winGame(t)}),this.container.append(this.grid),this.keyboard=new i(this.grid),this.container.append(this.keyboard),this.solver=new d,this.resizeGrid(),window.addEventListener("resize",(()=>this.resizeGrid())),this.wordList.loadWords().then((t=>{"hard"===this.mode?new u(t,this.seed,5,this.solver).onceInitialized((e=>{this.grid.initialize(t,e)})):this.grid.initialize(t,new g(t,this.seed))})),document.addEventListener("keydown",(t=>{"Backspace"===t.key?this.keyboard.backspace():"Enter"===t.key?this.keyboard.submit():t.key.match(/^[a-z]$/)&&this.keyboard.appendLetter(t.key)}))}createHeaderLink(t,e,s={}){const i=document.createElement("a");return i.setAttribute("href",e),s.newTab&&i.setAttribute("target","_blank"),i.appendChild(this.createHeaderIcon(t,s)),i}createHeaderIcon(t,e={}){var s;const i=document.createElement("img");return i.setAttribute("src",t),i.setAttribute("width",25..toString()),i.setAttribute("height",25..toString()),e.altText&&i.setAttribute("alt",e.altText),(e.title||e.altText)&&i.setAttribute("title",null!==(s=e.title)&&void 0!==s?s:e.altText),i}getGridArea(){return{width:Math.min(500,window.innerWidth-20),height:window.innerHeight-184-50}}resizeGrid(){const t=this.grid.resize(this.getGridArea());this.grid.getContainer().style.marginBottom=t+"px"}computeMatching(t,e){const s=[];var i=t;for(let t=0;t<e.length;t++){const r=e[e.length-t-1],a=i.split("").map(((t,e)=>[t,r.charAt(e)])).map((([t,e])=>t===e));s.push(a),i=r}return s.reverse(),s}formatMatching(t,e,s){return t.map((t=>t.map((t=>t?e:s)).join("")))}createShareMessage(t,e){const s=this.formatMatching(this.computeMatching(t.solution,t.upper),"🔽","⏺"),i=this.formatMatching(this.computeMatching(t.solution,t.lower),"🔼","⏺");return i.reverse(),Array.prototype.concat(["lamardle",e,this.grid.getNumGuesses().toString()+" tries"],s,[t.solution.split("").map((()=>"*️⃣")).join("")],i).join("\n")}computePar(){const t=this.solver.solve(this.grid.getUpperStart(),this.grid.getLowerStart());return Math.max(1,t.length-2)}winGame(t){return e=this,s=void 0,r=function*(){const e=[];e.push("You won in "+this.grid.getNumGuesses()+" tries!"),yield this.solver.loadGraph(),e.push("Par: "+this.computePar()),this.seed===this.gameData.formatDate(this.gameData.getDate())&&(this.gameData.addStreak(),e.push("Current Streak: "+this.gameData.getStreak())),this.winPopup.classList.remove("hidden"),this.winMessageText.innerText=e.join("\n"),this.winMessageShare.onclick=e=>{e.stopPropagation();const s=new URL(document.location.href);console.log(document.location.href),s.searchParams.set("seed",this.seed);const i=this.createShareMessage(t,s.toString()),r="Failed to Share :(",a=this.winMessageShare.innerText;navigator.share?navigator.share({title:document.title,text:i}).catch((()=>this.winMessageShare.innerText=r)):navigator.clipboard?(navigator.clipboard.writeText(i),this.winMessageShare.innerText="Copied to clipboard!",window.setTimeout((()=>this.winMessageShare.innerText=a),3e3)):this.winMessageShare.innerText=r}},new((i=void 0)||(i=Promise))((function(t,a){function n(t){try{o(r.next(t))}catch(t){a(t)}}function h(t){try{o(r.throw(t))}catch(t){a(t)}}function o(e){var s;e.done?t(e.value):(s=e.value,s instanceof i?s:new i((function(t){t(s)}))).then(n,h)}o((r=r.apply(e,s||[])).next())}));var e,s,i,r}getDailyPuzzleLink(){return"./"}getRandomPuzzleLink(){return"./?seed="+this.randomString()}randomString(){const t=[];for(let e=0;e<16;e++)t.push(Math.floor(10*Math.random()));return t.join("")}}customElements.define("lamardle-game",m)}},e={};function s(i){var r=e[i];if(void 0!==r)return r.exports;var a=e[i]={exports:{}};return t[i](a,a.exports,s),a.exports}s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s(827)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,